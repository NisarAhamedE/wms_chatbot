# WMS Chatbot Docker Compose
version: '3.8'

services:
  # WMS Chatbot API
  wms-chatbot:
    build: .
    container_name: wms-chatbot-api
    ports:
      - "5000:5000"
    environment:
      # Database configuration
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5433
      - DATABASE_NAME=wms_chatbot
      - DATABASE_USER=wms_user
      - DATABASE_PASSWORD=wms_password
      
      # Vector database configuration
      - WEAVIATE_URL=http://weaviate:5002
      - WEAVIATE_API_KEY=
      
      # Azure OpenAI configuration (set these in .env file)
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_DEPLOYMENT_CHAT=${AZURE_OPENAI_DEPLOYMENT_CHAT}
      - AZURE_OPENAI_DEPLOYMENT_EMBEDDING=${AZURE_OPENAI_DEPLOYMENT_EMBEDDING}
      
      # Application settings
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=http://localhost:5001,http://localhost:5002
      
      # Security settings
      - JWT_SECRET_KEY=your-secret-key-change-in-production
      - ENCRYPTION_KEY=your-encryption-key-change-in-production
      
      # Performance settings
      - MAX_QUERY_ROWS=10000
      - QUERY_TIMEOUT_SECONDS=300
      - MAX_CONCURRENT_QUERIES=3
      
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./data:/app/data
    depends_on:
      - postgres
      - weaviate
    restart: unless-stopped
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL Database
  postgres:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: wms-postgres
    environment:
      - POSTGRES_DB=wms_chatbot
      - POSTGRES_USER=wms_user
      - POSTGRES_PASSWORD=wms_password
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - wms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wms_user -d wms_chatbot"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database
  weaviate:
    image: semitechnologies/weaviate:1.23.7
    container_name: wms-weaviate
    ports:
      - "5002:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: 'true'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'node1'
    volumes:
      - weaviate_data:/var/lib/weaviate
    restart: unless-stopped
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching (Optional)
  redis:
    image: redis:7-alpine
    container_name: wms-redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - wms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wms-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - wms-chatbot
    restart: unless-stopped
    networks:
      - wms-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: wms-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - wms-network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: wms-grafana
    ports:
      - "5001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - wms-network

volumes:
  postgres_data:
  weaviate_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  wms-network:
    driver: bridge