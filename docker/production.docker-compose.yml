# Production Docker Compose Configuration
version: '3.8'

services:
  # WMS Chatbot API - Production Configuration
  wms-chatbot:
    build: 
      context: ..
      dockerfile: Dockerfile
    image: wms-chatbot:latest
    container_name: wms-chatbot-prod
    ports:
      - "5000:5000"
    environment:
      # Production database configuration
      - DATABASE_HOST=postgres-prod
      - DATABASE_PORT=5433
      - DATABASE_NAME=wms_chatbot_prod
      - DATABASE_USER=${DATABASE_USER}
      - DATABASE_PASSWORD=${DATABASE_PASSWORD}
      - DATABASE_SSL_MODE=require
      
      # Vector database configuration
      - WEAVIATE_URL=http://weaviate-prod:5002
      - WEAVIATE_API_KEY=${WEAVIATE_API_KEY}
      
      # Azure OpenAI configuration
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_DEPLOYMENT_CHAT=${AZURE_OPENAI_DEPLOYMENT_CHAT}
      - AZURE_OPENAI_DEPLOYMENT_EMBEDDING=${AZURE_OPENAI_DEPLOYMENT_EMBEDDING}
      
      # Production settings
      - ENV=production
      - LOG_LEVEL=INFO
      - CORS_ORIGINS=${CORS_ORIGINS}
      
      # Security settings
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      
      # Performance settings
      - MAX_QUERY_ROWS=5000
      - QUERY_TIMEOUT_SECONDS=300
      - MAX_CONCURRENT_QUERIES=10
      - WORKERS=4
      
      # Monitoring
      - ENABLE_METRICS=true
      - METRICS_PORT=9000
      
    volumes:
      - prod_logs:/app/logs
      - prod_data:/app/data
    depends_on:
      - postgres-prod
      - weaviate-prod
      - redis-prod
    restart: always
    networks:
      - wms-prod-network
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database - Production
  postgres-prod:
    image: timescale/timescaledb-ha:pg15-latest
    container_name: wms-postgres-prod
    environment:
      - POSTGRES_DB=wms_chatbot_prod
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - prod_postgres_data:/var/lib/postgresql/data
      - ../database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5433:5432"
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d wms_chatbot_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Weaviate Vector Database - Production
  weaviate-prod:
    image: semitechnologies/weaviate:1.23.7
    container_name: wms-weaviate-prod
    ports:
      - "5002:8080"
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_APIKEY_ENABLED: 'true'
      AUTHENTICATION_APIKEY_ALLOWED_KEYS: '${WEAVIATE_API_KEY}'
      AUTHENTICATION_APIKEY_USERS: 'wms-user'
      AUTHORIZATION_ADMINLIST_ENABLED: 'true'
      AUTHORIZATION_ADMINLIST_USERS: 'wms-user'
      PERSISTENCE_DATA_PATH: '/var/lib/weaviate'
      DEFAULT_VECTORIZER_MODULE: 'none'
      ENABLE_MODULES: 'text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai'
      CLUSTER_HOSTNAME: 'weaviate-prod'
      LOG_LEVEL: 'info'
    volumes:
      - prod_weaviate_data:/var/lib/weaviate
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Caching - Production
  redis-prod:
    image: redis:7-alpine
    container_name: wms-redis-prod
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6380:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    volumes:
      - prod_redis_data:/data
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.1'
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--pass", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Load Balancer - Production
  nginx-prod:
    image: nginx:alpine
    container_name: wms-nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/prod-nginx.conf:/etc/nginx/nginx.conf:ro
      - ../nginx/ssl:/etc/nginx/ssl:ro
      - prod_nginx_logs:/var/log/nginx
    depends_on:
      - wms-chatbot
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # Prometheus - Production Monitoring
  prometheus-prod:
    image: prom/prometheus:latest
    container_name: wms-prometheus-prod
    ports:
      - "9091:9090"
    volumes:
      - ../monitoring/prod-prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prod_prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.wal-compression'
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G

  # Grafana - Production Dashboards
  grafana-prod:
    image: grafana/grafana:latest
    container_name: wms-grafana-prod
    ports:
      - "5001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - prod_grafana_data:/var/lib/grafana
      - ../monitoring/grafana/prod-provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus-prod
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # Log Aggregation with ELK Stack
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: wms-elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    volumes:
      - prod_elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: always
    networks:
      - wms-prod-network
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 3G

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: wms-logstash
    volumes:
      - ../monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - prod_logs:/app/logs:ro
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - wms-prod-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: wms-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    restart: always
    networks:
      - wms-prod-network

volumes:
  prod_postgres_data:
  prod_weaviate_data:
  prod_redis_data:
  prod_prometheus_data:
  prod_grafana_data:
  prod_elasticsearch_data:
  prod_logs:
  prod_data:
  prod_nginx_logs:

networks:
  wms-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16